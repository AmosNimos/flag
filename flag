#!/bin/bash
################################################################################
# Name:        flag
# Date:        2024-04-21
# Author:      Amosnimos
# Description: The flag script parses command-line flags and sets variables accordingly.
################################################################################

# Function to print help message
print_help() {
    # Define colors
    local color_reset='\e[0m'
    local yellow_color='\e[33m'
    local green_color='\e[32m'

    echo "Usage: $0 [flags] [--help]"
    echo ""

    echo -e "${green_color}Description:${color_reset}"
    echo "The flag script parses command-line flags and sets variables accordingly."
    echo "All flags, regardless of capitalization, are treated as taking a value if one is not explicitly provided."
    echo "If a flag is provided without a value, it is set to 1 (true as boolean)."
    echo ""

    echo -e "${green_color}Options:${color_reset}"
    echo "  --help   Display this help message"
    echo ""

    echo -e "${green_color}Example:${color_reset}"
    echo "To use the 'flag' script, include it in your project and call it with the source command, like this:"
    echo ""
    echo -e "${yellow_color}source flag \"\$@\"${color_reset}"
    echo ""

    echo -e "${green_color}Warning:${color_reset}"
    echo -e "Make sure to source this script after the print_help function of your other script, to avoid overwriting them."

    exit 0
}

# Print help message if "--help" or "-h" flag is provided
if [[ ${1,,} == *"help" || ${1,,} == "-h" ]]; then
    print_help
fi

# Function to process flags
process_flags() {
    local flag=""
    local value=""

    while [[ $# -gt 0 ]]; do
        arg="$1"
        shift

        # Check if the argument is a flag
        if [[ $arg =~ ^-- ]]; then
            flag="${arg#--}"  # Extract the flag name
        elif [[ $arg =~ ^-[A-Za-z]$ ]]; then
            flag="${arg#-}"  # Extract the flag letter
        else
            # Argument is a value for the previous flag
            if [[ -n $flag ]]; then
                # Concatenate the argument to the existing value
                value+=" $arg"
            fi
        fi

        # If the flag is followed directly by another flag or is the last argument, set its value
        if [[ $flag && ( ! $1 || $1 =~ ^- ) ]]; then
            if [[ -z $value ]]; then
                value=1
            fi 
            eval "flag_$flag=\"$value\""
            flag=""
            value=""
        fi
    done
}

# Process flags
process_flags "$@"
