#!/bin/bash
################################################################################
# Name:        flag
# Date:        2024-11-12
# Author:      Amosnimos
# Description: Parses command-line flags, treating flags as booleans or assigning values if provided.
################################################################################

# Check for an existing print_help function and define if absent
if [[ ! "$(declare -f)" =~ "print_help" ]]; then
    print_help() {
        local color_reset='\e[0m'
        local yellow_color='\e[33m'
        local green_color='\e[32m'
        
        echo -e "Usage: $0 [flags] [--help]\n"
        echo -e "${green_color}Description:${color_reset}"
        echo "Parses command-line flags, treating flags as booleans or assigning values if provided."
        echo -e "Flags used without values default to 1.${color_reset}\n"
        
        echo -e "${green_color}Options:${color_reset}"
        echo "  --help   Display this help message"
        echo ""
        echo -e "${green_color}Example:${color_reset}"
        echo "  source flag \"\$@\""
        echo ""

        exit 0
    }
fi

# Print help message if "--help" or "-h" flag is provided
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
        print_help
    fi
fi

# Flag parsing function
process_flags() {
    local flag=""
    local value=""

    while [[ $# -gt 0 ]]; do
        local arg="$1"
        shift
        
        # If the argument is a long flag (starts with --)
        if [[ $arg =~ ^-- ]]; then
            flag="${arg#--}"
            value=""
            # Check if the next argument is a value for this flag
            if [[ -n "$1" && ! "$1" =~ ^- ]]; then
                value="$1"
                shift
            fi
        # If the argument is a short flag (starts with -)
        elif [[ $arg =~ ^-[A-Za-z]$ ]]; then
            flag="${arg#-}"
            value=""
            # Check if the next argument is a value for this flag
            if [[ -n "$1" && ! "$1" =~ ^- ]]; then
                value="$1"
                shift
            fi
        else
            # If the argument is a value for a previous flag
            if [[ -n $flag ]]; then
                value="$arg"
            fi
        fi

        # Assign the flag with its value (or default to 1 if no value provided)
        if [[ -n $flag ]]; then
            eval "flag_$flag=${value:-1}"
            flag=""
            value=""
        fi
    done
}

# Call the flag processing function
process_flags "$@"
